{"version":3,"sources":["components/ToDoItem/index.js","components/NewTodoForm/index.js","containers/ToDoList/index.js","App.js","serviceWorker.js","index.js"],"names":["Item","styled","div","props","done","ToDoItem","state","toggleDone","setState","text","this","onClick","Component","defaultProps","TextInput","input","Button","button","Container","NewTodoForm","onChange","onSubmit","draft","type","value","placeholder","ToDoList","tasks","updateDraft","event","target","addToDo","title","map","task","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qfAGA,IAAMA,EAAOC,IAAOC,IAAV,KAKC,SAAAC,GAAK,OAAIA,EAAMC,KAAO,MAAO,UACnB,SAAAD,GAAK,OAAIA,EAAMC,KAAO,eAAgB,UASrDC,E,4MAKFC,MAAQ,CACNF,KAAM,EAAKD,MAAMC,M,EAGnBG,WAAa,WACX,EAAKC,SAAS,CAACJ,MAAO,EAAKE,MAAMF,Q,uDAG1B,IACCK,EAASC,KAAKP,MAAdM,KACR,OACA,kBAACT,EAAD,CAAMW,QAASD,KAAKH,WAAYH,KAAMM,KAAKJ,MAAMF,MAC/C,2BAEGK,Q,GAnBYG,aAAjBP,EACKQ,aAAe,CACpBT,MAAM,GAuBGC,Q,mmBCxCf,IAAMS,EAAYb,IAAOc,MAAV,KAQTC,EAASf,IAAOgB,OAAV,KAYNC,EAAYjB,IAAOC,IAAV,KAaAiB,EAPK,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAUC,EAAZ,EAAYA,SAAUC,EAAtB,EAAsBA,MAAtB,OAClB,kBAACJ,EAAD,KACE,kBAACJ,EAAD,CAAWS,KAAK,OAAOH,SAAUA,EAAUI,MAAOF,EAAOG,YAAY,4CACrE,kBAACT,EAAD,CAAQL,QAASU,GAAjB,O,qNC3BJ,IAAMH,EAAYjB,IAAOC,IAAV,KAWTwB,E,4MASFpB,MAAQ,CACNqB,MAAO,EAAKxB,MAAMwB,MAClBL,MAAO,I,EAGTM,YAAc,SAAAC,GACZ,EAAKrB,SAAS,CAACc,MAAOO,EAAMC,OAAON,S,EAGrCO,QAAU,WACR,EAAKvB,UAAS,SAAAF,GAAK,MAAK,CACtBqB,MAAM,GAAD,mBAAMrB,EAAMqB,OAAZ,CAAmB,CAAClB,KAAM,EAAKH,MAAMgB,SAASA,MAAO,Q,uDAKrD,IACCU,EAAUtB,KAAKP,MAAf6B,MADF,EAEkBtB,KAAKJ,MAArBqB,EAFF,EAEEA,MAAOL,EAFT,EAESA,MACf,OACE,kBAAC,EAAD,KAEE,4BAAKU,GACJL,EAAMM,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAUzB,KAAMyB,EAAKzB,KAAML,KAAM8B,EAAK9B,UAK3D,kBAAC,EAAD,CACEiB,SAAYX,KAAKqB,QACjBX,SAAYV,KAAKkB,YACjBN,MAASA,S,GAxCIV,aAAjBc,EACKb,aAAe,CAClBc,MAAO,CACH,CAACvB,MAAM,EAAMK,KAAM,uCACnB,CAACL,MAAM,EAAOK,KAAM,kCAEvBuB,MAAO,cAwCDN,QC9CAS,E,uKARX,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,W,GALUxB,aCOEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.38662185.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport styled from 'styled-components'\r\n\r\nconst Item = styled.div`\r\n  background: #5C5E6D;\r\n  margin: 5px;\r\n  padding: 1px 10px 1px 10px;\r\n  border-radius: 10px;\r\n  color: ${props => props.done ? \"red\": \"auto\" };\r\n  text-decoration: ${props => props.done ? \"line-through\": \"auto\"};\r\n`\r\n/* zapis \r\n className = {this.state.done ? 'doneToDo' : ''}\r\n zastąpiony: \r\n color: ${props => props.done ? \"red\": \"auto\" };\r\n i w divie w którym była ta klasa przekazujemy props done\r\n */\r\n\r\nclass ToDoItem extends Component {\r\n    static defaultProps = {\r\n      done: false\r\n    }\r\n  \r\n    state = {\r\n      done: this.props.done\r\n    }\r\n  \r\n    toggleDone = () => {\r\n      this.setState({done: !this.state.done})\r\n    }\r\n    \r\n    render(){\r\n      const { text } = this.props\r\n      return(\r\n      <Item onClick={this.toggleDone} done={this.state.done}>\r\n        <p>\r\n         {/*{this.props.task} */}\r\n          {text}\r\n        </p>\r\n      </Item>)\r\n    }\r\n  }\r\n\r\nexport default ToDoItem\r\n  ","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst TextInput = styled.input`\r\n  background: #1f2427;\r\n  color: #fff;\r\n  width: 100%;\r\n  border: 0;\r\n  border-radius: 5px 0px 0px 5px;\r\n  padding: 5px;\r\n`\r\nconst Button = styled.button`\r\n  background: #1f2427;\r\n  color: #214D55;\r\n  font-size: 1.5rem;\r\n  border: 0;\r\n  padding: 5px;\r\n  border-radius: 0px 5px 5px 0px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst Container = styled.div`\r\n  margin-top: 15px;\r\n  display: flex;\r\n  justify-content: space-between; \r\n`\r\n\r\nconst NewTodoForm = ({onChange, onSubmit, draft}) => (\r\n  <Container>\r\n    <TextInput type=\"text\" onChange={onChange} value={draft} placeholder=\"Wprowadź nowe zadanie do wykonania\"/>\r\n    <Button onClick={onSubmit}>+</Button>\r\n  </Container>\r\n)\r\n\r\nexport default NewTodoForm","import React, { Component } from 'react';\r\nimport ToDoItem from '../../components/ToDoItem'\r\nimport NewTodoForm from '../../components/NewTodoForm'\r\nimport styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n  background: #3A4149;\r\n  margin: 0 auto;\r\n  width: 80%;\r\n  max-width: 600px;\r\n  padding: 14px;\r\n  border-radius: 14px;\r\n  margin-top: 14px;\r\n`\r\n\r\n\r\nclass ToDoList extends Component {\r\n    static defaultProps = {\r\n        tasks: [\r\n            {done: true, text: \"Zrobić aplikację ToDoList\"},\r\n            {done: false, text: \"Wynieść śmieci\"}\r\n         ],\r\n         title: \"TO DO LIST\"\r\n    }\r\n\r\n    state = {\r\n      tasks: this.props.tasks,\r\n      draft: \"\"\r\n    }\r\n  \r\n    updateDraft = event =>{\r\n      this.setState({draft: event.target.value})\r\n    }\r\n  \r\n    addToDo = () => {\r\n      this.setState(state => ({\r\n        tasks: [...state.tasks, {text: this.state.draft}], draft: ''\r\n      }))\r\n    }\r\n    //dzięki przypisaniu const tite this props, nie musze w kodzie ponizej pisac\r\n    //{this.props.title}, tylko samo {title}\r\n    render(){\r\n      const { title } = this.props\r\n      const { tasks, draft} = this.state\r\n      return(\r\n        <Container>\r\n          {/* W tym miejscu nie musze pisac this.props.title*/}\r\n          <h1>{title}</h1>\r\n          {tasks.map(task => <ToDoItem text={task.text} done={task.done} />)}\r\n      {/*}    <input type=\"text\" onChange={this.updateDraft} value={draft}/>\r\n          <button onClick={this.addToDo}>ADD</button>\r\n       {*/}\r\n  \r\n        <NewTodoForm \r\n          onSubmit = {this.addToDo}\r\n          onChange = {this.updateDraft}\r\n          draft = {draft} />\r\n        </Container>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default ToDoList","import React, { Component } from 'react';\nimport './App.css'\nimport ToDoList from './containers/ToDoList'\n\n\nclass App extends Component {\n\n  render(){\n    return (\n      <div className=\"App\">\n        <ToDoList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}